/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AccountDTO;
import io.swagger.model.AccountDTOPOST;
import io.swagger.model.AccountPutDTO;
import java.math.BigDecimal;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.InlineResponse2002;
import io.swagger.model.InlineResponse2003;
import io.swagger.model.InlineResponse2004;
import io.swagger.model.InlineResponse2005;
import io.swagger.model.InlineResponse2006;
import io.swagger.model.InlineResponse2007;
import io.swagger.model.InlineResponse201;
import io.swagger.model.InlineResponse2011;
import io.swagger.model.InlineResponse400;
import io.swagger.model.InlineResponse401;
import io.swagger.model.InlineResponse403;
import io.swagger.model.InlineResponse404;
import io.swagger.model.InlineResponse500;
import io.swagger.model.TransactionDTO;
import io.swagger.model.UserAccountDTO;
import io.swagger.model.UserDTOPOST;
import io.swagger.model.UserLoginDTO;
import io.swagger.model.UserPasswordDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-04T19:02:55.812Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "User registration", description = "Adds an user to the database", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "POST request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "Example of user item to add", required=true, schema=@Schema()) @Valid @RequestBody UserDTOPOST body);


    @Operation(summary = "changes password of the logged in user", description = "changes user password", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "POST request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2003.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users/password",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<InlineResponse2003> changeUserPassword(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema()) @RequestHeader(value="Jwt token", required=true) String jwtToken, @Parameter(in = ParameterIn.DEFAULT, description = "Example of user login information to provide", required=true, schema=@Schema()) @Valid @RequestBody UserPasswordDTO body);


    @Operation(summary = "creates account", description = "creates account for an existing user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Account successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2011.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2011> createAccount(@Parameter(in = ParameterIn.DEFAULT, description = "Example of account information to provide.", required=true, schema=@Schema()) @Valid @RequestBody AccountDTOPOST body);


    @Operation(summary = "updates an account in the database", description = "Edits account information", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account successfully edited", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2005.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/accounts/{iban}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<InlineResponse2005> editAccount(@Parameter(in = ParameterIn.PATH, description = "iban of the account you want to update", required=true, schema=@Schema()) @PathVariable("iban") String iban, @Parameter(in = ParameterIn.DEFAULT, description = "Example of account item to edit", required=true, schema=@Schema()) @Valid @RequestBody AccountPutDTO body);


    @Operation(summary = "edit the provided user", description = "edits the matching user and account infromation in the database (Employee)", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Put request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2001> editUserAccount(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema()) @RequestHeader(value="Jwt token", required=true) String jwtToken, @Parameter(in = ParameterIn.PATH, description = "id of the user you want to get.", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "Example of user login information to provide", required=true, schema=@Schema()) @Valid @RequestBody UserAccountDTO body);


    @Operation(summary = "gets a single account by the id", description = "Returns the account that matches the given id ", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "GET request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2004.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/accounts/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2004> getAccountById(@Parameter(in = ParameterIn.PATH, description = "iban of the account you want to get", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "get own accounts by default, otherwise by user_id", description = "Returns own accounts or by specified user id. ", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "GET request successful", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountDTO>> getAllAccounts(@Parameter(in = ParameterIn.QUERY, description = "this query will get both accounts that belong to matching user id." ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId, @Parameter(in = ParameterIn.QUERY, description = "this query will filter either 'primary' or 'savings'." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type);


    @Operation(summary = "get single transaction", description = "Returns transaction that matches the given id.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieved transaction successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2006.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/transactions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2006> getTransactionById(@Parameter(in = ParameterIn.PATH, description = "id of the transaction to return", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "get single user", description = "Returns user that matches the given id.  ", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "GET request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getUserById(@Parameter(in = ParameterIn.PATH, description = "id of the user you want to get.", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "returns all users or selected type of users", description = "With the correct options the users will be returned. ", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "GET request successful", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> getUsers(@NotNull @Parameter(in = ParameterIn.QUERY, description = "page number for pagination" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "page", required = true) Integer page, @Parameter(in = ParameterIn.QUERY, description = "this allows filtering based on name" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "this allows filtering based on iban" ,schema=@Schema()) @Valid @RequestParam(value = "iban", required = false) String iban);


    @Operation(summary = "User Login, returns jwt token with successful login", description = "authenticates user", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "POST request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2002.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/users/login",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2002> loginUser(@Parameter(in = ParameterIn.DEFAULT, description = "Example of user login information to provide", required=true, schema=@Schema()) @Valid @RequestBody UserLoginDTO body);


    @Operation(summary = "performs transaction", description = "performs transaction", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Post request successfull", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2006.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/transactions/",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "text/plain" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2006> performTransaction(@Parameter(in = ParameterIn.DEFAULT, description = "Example of account information to provide.", required=true, schema=@Schema()) @Valid @RequestBody TransactionDTO body);


    @Operation(summary = "search through the transaction provides various filters", description = "provides the ability to search and filter the results of transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "GET request successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2007.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "You are not authorized to make this request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/api/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2007> searchTransactions(@Parameter(in = ParameterIn.QUERY, description = "Allows to search on particular date" ,schema=@Schema()) @Valid @RequestParam(value = "date", required = false) String date, @Parameter(in = ParameterIn.QUERY, description = "Allows to search on particular user id" ,schema=@Schema()) @Valid @RequestParam(value = "user", required = false) Integer user, @Parameter(in = ParameterIn.QUERY, description = "Allows to search on all transactions for an account" ,schema=@Schema()) @Valid @RequestParam(value = "account", required = false) Integer account, @Parameter(in = ParameterIn.QUERY, description = "shows all transactions from the given iban." ,schema=@Schema()) @Valid @RequestParam(value = "from", required = false) String from, @Parameter(in = ParameterIn.QUERY, description = "returns all transactions that were sent to the given iban." ,schema=@Schema()) @Valid @RequestParam(value = "to", required = false) String to, @Parameter(in = ParameterIn.QUERY, description = "returns account where the balance matches given number." ,schema=@Schema()) @Valid @RequestParam(value = "as_eq", required = false) Integer asEq, @Parameter(in = ParameterIn.QUERY, description = "returns account where the balance is lower than given number." ,schema=@Schema()) @Valid @RequestParam(value = "as_lt", required = false) Integer asLt, @Parameter(in = ParameterIn.QUERY, description = "returns account where the balance is higher than given number." ,schema=@Schema()) @Valid @RequestParam(value = "as_mt", required = false) Integer asMt);

}

