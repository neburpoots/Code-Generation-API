/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.controller;

import io.swagger.model.user.*;
import io.swagger.model.utils.DTOEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-05T18:12:07.854Z[GMT]")
@Validated
public interface UserControllerInterface {

    @Operation(summary = "User registration", description = "Returns a list of Users, filtered by parameters and pagination.", tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Created"),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "409", description = "There was a conflict processing your request."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/register",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<UserGetDTO> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "Created User object", required = true, schema = @Schema()) @Valid @RequestBody UserPostDTO body);


    @Operation(summary = "Changes password of the logged in User", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Successfully changed the password."),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/password",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> editPassword(@Parameter(in = ParameterIn.DEFAULT, description = "Password information", required = true, schema = @Schema()) @Valid @RequestBody UserPasswordDTO body);


    @Operation(summary = "Edit a User by id", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Successfully saved changes."),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> editUserById(@Parameter(in = ParameterIn.PATH, description = "Id of the user you want to edit", required = true, schema = @Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Created User object", required = true, schema = @Schema()) @Valid @RequestBody UserPatchDTO body);


    @Operation(summary = "Find a User by id", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserSearchDTO.class))),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<DTOEntity> getUserById(@Parameter(in = ParameterIn.PATH, description = "Id of the user you want to get", required = true, schema = @Schema()) @PathVariable("id") String id);


    @Operation(summary = "Finds Users by name and/or iban", description = "Returns a list of Users, filtered by parameters and pagination.", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success"),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Page<DTOEntity>> getUsers(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Page number for pagination", required = true, schema = @Schema()) @Valid @RequestParam(value = "pageNo", required = true) Integer pageNo, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Page size for pagination", required = true, schema = @Schema()) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize, @Parameter(in = ParameterIn.QUERY, description = "First name value that needs to be considered for filter", schema = @Schema()) @Valid @RequestParam(value = "firstname", required = false) String firstname, @Parameter(in = ParameterIn.QUERY, description = "Last name value that needs to be considered for filter", schema = @Schema()) @Valid @RequestParam(value = "lastname", required = false) String lastname, @Parameter(in = ParameterIn.QUERY, description = "IBAN value that needs to be considered for filter", schema = @Schema()) @Valid @RequestParam(value = "iban", required = false) String iban, @Parameter(in = ParameterIn.QUERY, description = "Filter users with or without accounts, blank for all", schema = @Schema()) @Valid @RequestParam(value = "account", required = false) String account);


    @Operation(summary = "Logs User into the system", description = "", tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success"),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/login",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<UserLoginReturnDTO> loginUser(@Parameter(in = ParameterIn.DEFAULT, description = "Login credentials", required = true, schema = @Schema()) @Valid @RequestBody UserLoginDTO body);

    @Operation(summary = "Refreshes token", description = "", tags = {"users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TokenRefreshResponseDTO.class))),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.")})
    @RequestMapping(value = "/api/users/refreshtoken",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<TokenRefreshResponseDTO> refreshToken(@Parameter(in = ParameterIn.DEFAULT, description = "Refresh token", required = true, schema = @Schema()) @Valid @RequestBody TokenRefreshRequestDTO body);


}

