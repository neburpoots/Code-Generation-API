/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.controller;

import io.swagger.model.entity.Transaction;
import io.swagger.model.transaction.TransactionPostDTO;
import io.swagger.model.utils.DTOEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-05T18:12:07.854Z[GMT]")
@Validated
public interface TransactionControllerInterface {

    @Operation(summary = "Make a Transaction", description = "Makes a transaction.", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "409", description = "There was a conflict processing your request."),

            @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/api/transactions",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<DTOEntity> addTransaction(@Parameter(in = ParameterIn.DEFAULT, description = "Created Transaction object", required=true, schema=@Schema()) @Valid @RequestBody TransactionPostDTO body);


    @Operation(summary = "Finds a Transaction based on id", description = "Returns transaction information matching the provided id.", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/api/transactions/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<DTOEntity>  getTransactionById(
            @Parameter(in = ParameterIn.PATH, description = "All transaction of given iban (id)", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Finds Transactions by date, user, iban or by amount", description = "Returns a list of Transactions, filtered by parameters and pagination.", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),

            @ApiResponse(responseCode = "400", description = "The request was invalid or cannot be served."),

            @ApiResponse(responseCode = "401", description = "Credentials invalid or missing."),

            @ApiResponse(responseCode = "403", description = "You are not authorized to make this request."),

            @ApiResponse(responseCode = "404", description = "Resource not found."),

            @ApiResponse(responseCode = "500", description = "Internal server error.") })
    @RequestMapping(value = "/api/transactions",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<DTOEntity>> getTransactions(
            @NotNull @Parameter(in = ParameterIn.QUERY, description = "Page number for pagination" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") Integer page,
            @NotNull @Parameter(in = ParameterIn.QUERY, description = "Page size for pagination",
            required = true, schema = @Schema()) @Valid @RequestParam(value = "pageSize",
            required = true, defaultValue = "10") Integer pageSize ,@Parameter(in = ParameterIn.QUERY, description = "Date value that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "date", required = false, defaultValue = "") String userId, @Parameter(in = ParameterIn.QUERY, description = "From IBAN account that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "from_iban", required = false, defaultValue = "") String fromIban, @Parameter(in = ParameterIn.QUERY, description = "To IBAN account that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "to_iban", required = false, defaultValue = "") String toIban, @Parameter(in = ParameterIn.QUERY, description = "Equals given amount that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "as_eq", required = false, defaultValue = "") String asEq, @Parameter(in = ParameterIn.QUERY, description = "Less than given amount that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "as_lt", required = false, defaultValue = "") String asLt, @Parameter(in = ParameterIn.QUERY, description = "More than given amount that needs to be considered for filter" ,schema=@Schema()) @Valid @RequestParam(value = "as_mt", required = false, defaultValue = "") String asMt);
}

